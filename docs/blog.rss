<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Chris Amico, journalist &amp; programmer</title><link>https://chrisamico.com</link><description>Journalist &amp; programmer</description><atom:link href="https://chrisamico.com" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><lastBuildDate>Sun, 28 May 2023 12:11:21 +0000</lastBuildDate><item><title>So you want to build something interactive for your news story?</title><link>https://chrisamico.com/blog/2023-05-20/interactive-app-infrastructure/</link><description>&lt;p&gt;I&amp;rsquo;ve built a lot of interactive stories, and I&amp;rsquo;ve set up templates and storytelling infrastructure at a few news organizations. These are the questions I think need to be answered before building any bespoke storytelling experiences in-house.&lt;/p&gt;
&lt;p&gt;In the context of my &lt;a href="https://chrisamico.com/blog/2023-02-01/three-kinds-of-code/"&gt;three kinds of code&lt;/a&gt;, this is &lt;strong&gt;product&lt;/strong&gt; work that enables &lt;strong&gt;storytelling&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Where do you put your stuff?&lt;/h2&gt;
&lt;p&gt;In most cases, this is a bundle of files &amp;ndash; HTML, CSS and JavaScript &amp;ndash; that you can serve with something fast. The simpler that bundle is, the more options you have.&lt;/p&gt;
&lt;p&gt;Object storage &amp;ndash; &lt;a href="https://aws.amazon.com/s3/"&gt;Amazon S3&lt;/a&gt;, &lt;a href="https://cloud.google.com/storage"&gt;Google Cloud Storage&lt;/a&gt; or Microsoft&amp;rsquo;s &lt;a href="https://azure.microsoft.com/en-us/products/storage/blobs/"&gt;Azure Blog Storage&lt;/a&gt; &amp;ndash; remains a popular choice, especially if you don&amp;rsquo;t need a URL that matches your main website. It&amp;rsquo;s cheap, has basically infinite capacity and rarely fails.&lt;/p&gt;
&lt;p&gt;Store your stuff there, and ideally put a CDN in front of it, and you&amp;rsquo;re done. I&amp;rsquo;ve done this almost everywhere I&amp;rsquo;ve worked and never regretted it.&lt;/p&gt;
&lt;p&gt;That said, there are other options, and sometimes other needs.&lt;/p&gt;
&lt;p&gt;Static files are easy to serve, and if you&amp;rsquo;re not doing &lt;a href="https://www.merriam-webster.com/words-at-play/break-the-internet"&gt;break the internet&lt;/a&gt; traffic, you can probably use just about any off-the-shelf webserver.&lt;/p&gt;
&lt;p&gt;How do I know this? Because in 2010, I built a &lt;a href="https://www.pbs.org/newshour/nation/gulf-coast-oil-leak-widget"&gt;little ticker&lt;/a&gt; tracking the &lt;a href="https://www.pbs.org/newshour/tag/gulf-oil-spill"&gt;Gulf Coast oil spill&lt;/a&gt; and it ended up on some of the most popular news sites in the world. We served it out of the static file directory of our little Movable Type instance.&lt;/p&gt;
&lt;p&gt;Generally speaking, it&amp;rsquo;s going to be easier to get files onto S3 or Cloud Storage than it would be to set up a server and run NGINX or Apache. But if that&amp;rsquo;s your only option, it can work.&lt;/p&gt;
&lt;h3&gt;Do I need a server?&lt;/h3&gt;
&lt;p&gt;Sometimes, yes, you do need a server. Maybe you need authentication, or your data is too big or too complicated to serve as static files, or you have a private API and need to mask it somewhere. Now what?&lt;/p&gt;
&lt;p&gt;This is going to be more complicated than any of the options above. In most cases, I recommend a platform-as-a-service provider. I&amp;rsquo;ve used &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt; for years, but lately all my side projects go on &lt;a href="https://fly.io/"&gt;fly.io&lt;/a&gt;. There are other options like &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; and &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These are going to vary widely in what they offer, what they cost and how much time you&amp;rsquo;ll need to spend managing them.&lt;/p&gt;
&lt;p&gt;If you get to this point, you are definitely doing &lt;a href="https://chrisamico.com/blog/2023-02-01/three-kinds-of-code/"&gt;Product&lt;/a&gt;. Remember to pay your (technical) debts.&lt;/p&gt;
&lt;h2&gt;How do you get it there?&lt;/h2&gt;
&lt;p&gt;Deploying code to production (and to staging!) should be boring. It should be routine. Ideally, it shouldn&amp;rsquo;t even require a developer.&lt;/p&gt;
&lt;p&gt;Consider &lt;a href="https://www.usatoday.com/storytelling/database-rating-dam-condition-climate-change-heavy-rain/"&gt;this project&lt;/a&gt; I worked on at USA TODAY. I wrote most of the code, but there were frequent updates as my colleagues tweaked copy and I touched up the design. Most of those updates used a Github Action that followed a standardized deployment process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clone a repository&lt;/li&gt;
&lt;li&gt;Install dependencies&lt;/li&gt;
&lt;li&gt;Pull data from Google Sheets, and possibly other places&lt;/li&gt;
&lt;li&gt;Compile and render a &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt; application&lt;/li&gt;
&lt;li&gt;Push the built files to Google Cloud Storage&lt;/li&gt;
&lt;li&gt;Purge a frontend cache&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;On my old team, that process was so routine we rarely thought about it, but it enabled everything else we did. It completely took away the mental overhead of deployment.&lt;/p&gt;
&lt;h2&gt;How does it get on your website?&lt;/h2&gt;
&lt;p&gt;Every CMS is a special snowflake, and there&amp;rsquo;s no solution I can offer that&amp;rsquo;s going to work everywhere.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can you put an &lt;code&gt;iframe&lt;/code&gt; in a regular story?&lt;/li&gt;
&lt;li&gt;Do you have a special/longform/interactive story template?&lt;/li&gt;
&lt;li&gt;Can you inject HTML, CSS or JavaScript into story pages?&lt;/li&gt;
&lt;li&gt;Can you create blank pages with custom, maybe external assets?&lt;/li&gt;
&lt;li&gt;Or does anything that&amp;rsquo;s not a story live on a subdomain?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How you answer the questions above will tell you how to get your cool interactive thing onto your website. And if you can&amp;rsquo;t answer this question, you might need to rethink your storytelling choices.&lt;/p&gt;
&lt;h2&gt;Who can update what?&lt;/h2&gt;
&lt;p&gt;This is an editorial question, not a technical one. You need to decide who is responsible for anything that might need to be changed, and how that&amp;rsquo;s going to happen.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s easy to fall into the trap of thinking words are for editors and everything else is for developers. But this whole thing is an editorial project, and everyone involved is a journalist. For example, the &lt;a href="https://www.azcentral.com/in-depth/news/2021/11/20/us-forest-service-water-management-limited-oversight-diversions/8446212002/"&gt;last map in this story&lt;/a&gt; animates lines that trace water diversions. The text in each step lives in a spreadsheet, but there are also variables that let an editor change the speed of the animaation or the color of the lines. Changing those was an editorial choice, so those decisions lived in a place an editor could update if needed.&lt;/p&gt;
&lt;h2&gt;Do you need to build anything?&lt;/h2&gt;
&lt;p&gt;Maybe not. There are great off-the-shelf tools that didn&amp;rsquo;t exist a few years ago. I use &lt;a href="https://felt.com/"&gt;Felt&lt;/a&gt; for maps and &lt;a href="https://www.datawrapper.de/"&gt;Datawrapper&lt;/a&gt; or &lt;a href="https://flourish.studio/"&gt;Flourish&lt;/a&gt; for charts. Don&amp;rsquo;t sleep on good photos, video or illustration.&lt;/p&gt;
&lt;p&gt;Before you go beyond those, make sure have an answer to the questions above.&lt;/p&gt;</description><guid isPermaLink="false">/blog/2023-05-20/interactive-app-infrastructure/</guid><pubDate>Sat, 20 May 2023 00:00:00 -0400</pubDate></item><item><title>Boston parcels, mapped three ways</title><link>https://chrisamico.com/blog/2023-03-17/boston-parcel-maps/</link><description>&lt;p&gt;I made a few maps this week, just for fun, using Boston&amp;rsquo;s parcel and assessment data.&lt;/p&gt;
&lt;p&gt;All of these used my &lt;a href="https://github.com/eyeseast/spatial-data-cooking-show"&gt;Datasette GIS stack&lt;/a&gt; to filter and join the relevant data and &lt;a href="https://felt.com"&gt;Felt&lt;/a&gt; to visualize it.&lt;/p&gt;
&lt;h3&gt;Age of Boston&amp;rsquo;s buildings&lt;/h3&gt;
&lt;p&gt;Assessments include a column called &lt;code&gt;YR_BUILT&lt;/code&gt; (and also a &lt;code&gt;YR_REMODEL&lt;/code&gt; which could be interesting). Joining this to parcel boundaries gave me a map of Boston&amp;rsquo;s buildings colored by age. Darker purple is the oldest parcels, and some go back to the 1700s. It&amp;rsquo;s an old city.&lt;/p&gt;
&lt;iframe width="100%" height="450" frameborder="0" title="Felt Map" src="https://felt.com/embed/map/Boston-buildings-colored-by-year-built-sPYjj6I0ROmOhnJ9AC9AURWD?lat=42.313051&amp;lon=-71.068934&amp;zoom=11.76"&gt;&lt;/iframe&gt;

&lt;h3&gt;Value of residential units&lt;/h3&gt;
&lt;p&gt;I initially made a map of &lt;a href="https://felt.com/map/Boston-buildings-Assessment-value-ePQe7WgaTgmjmbUmBOx9CwC"&gt;all property values&lt;/a&gt;, but that isn&amp;rsquo;t very interesting when you include houses and also universities and an airport. Those big public works are expensive.&lt;/p&gt;
&lt;p&gt;But filtering out &lt;a href="https://github.com/eyeseast/boston-parcels/blob/main/queries/boston/residential-value.sql"&gt;everything but residential units&lt;/a&gt; &amp;ndash; coded as &lt;code&gt;R1&lt;/code&gt;, &lt;code&gt;R2&lt;/code&gt;, &lt;code&gt;R3&lt;/code&gt;, &lt;code&gt;R4&lt;/code&gt; and &lt;code&gt;CD&lt;/code&gt; &amp;ndash; makes for an intersting map.&lt;/p&gt;
&lt;p&gt;There are still things missing here: Mixed use buildings are a separate category, as well as large apartment buildings. I wanted to map places an individual might realistically own.&lt;/p&gt;
&lt;iframe width="100%" height="450" frameborder="0" title="Felt Map" src="https://felt.com/embed/map/Boston-parcels-Residential-assessed-value-efGgl9AsxSMuMGp2tcdHmLB?lat=42.312442&amp;lon=-71.085013&amp;zoom=11.82"&gt;&lt;/iframe&gt;

&lt;h3&gt;Value density&lt;/h3&gt;
&lt;p&gt;While I was working on this, Jeffrey Baker in the &lt;a href="https://felt.com/community-signup"&gt;Felt community Slack&lt;/a&gt; posted a map of &lt;a href="https://felt.com/map/Alameda-County-Parcels-2022-iNHItlavRg2zSCF4ncl9ACD"&gt;Alameda County&lt;/a&gt;, CA, colored by &amp;ldquo;value density,&amp;rdquo; or assessment value divided by area. It&amp;rsquo;s a smart way to handle the problem I had with the range of values in Boston.&lt;/p&gt;
&lt;p&gt;Is it a huge surprise to see more concentrated land value downtown? No. But it&amp;rsquo;s an interesting way to look at the city, and to think about the economic tradeoffs of living on its edges.&lt;/p&gt;
&lt;iframe width="100%" height="450" frameborder="0" title="Felt Map" src="https://felt.com/embed/map/Boston-2023-value-density-x9Aa76bcdRm9BTPUr2kv9ADuD?lat=42.31251&amp;lon=-71.05698&amp;zoom=11.75"&gt;&lt;/iframe&gt;

&lt;p&gt;All the code I used is &lt;a href="https://github.com/eyeseast/boston-parcels"&gt;here&lt;/a&gt;. Open an issue if there&amp;rsquo;s something you&amp;rsquo;d like to see mapped.&lt;/p&gt;</description><guid isPermaLink="false">/blog/2023-03-17/boston-parcel-maps/</guid><pubDate>Fri, 17 Mar 2023 00:00:00 -0400</pubDate></item><item><title>Five years of Go</title><link>https://chrisamico.com/blog/2023-03-05/five-years-of-go/</link><description>&lt;p&gt;I&amp;rsquo;d never written a line of Go when I started at Gannett in 2018. I&amp;rsquo;d barely even looked at the language, and when I did it looked both verbose and intimidating. But my team&amp;rsquo;s primary codebase was written in Go, and it was (at the time) the recommended approach to building web services in the company. After half a decade of regularly working in Go, there&amp;rsquo;s a lot I&amp;rsquo;ve come to like about it, and a few things I still struggle with.&lt;/p&gt;
&lt;p&gt;Before learning Go, I&amp;rsquo;d worked in Python, JavaScript and PHP, so much of my experience with Go is shaped by how it&amp;rsquo;s different from those languages.&lt;/p&gt;
&lt;p&gt;Despite my initial hesitation, Go was relatively easy to learn. It&amp;rsquo;s a small language with great documentation. I went through &lt;a href="https://go.dev/tour/"&gt;A tour of Go&lt;/a&gt; in a day (partially on my phone), and &lt;a href="https://go.dev/doc/effective_go.html"&gt;Effective Go&lt;/a&gt; gave me a broad conceptual understanding of the language.&lt;/p&gt;
&lt;h2&gt;Types are OK, actually&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;d never used a strongly typed, compiled language before Go. The first langauge I learned was Python, and I was used to writing functions that might handle any kind of data I passed in, and might return a different type depending on the situation. I&amp;rsquo;m not saying that&amp;rsquo;s a good idea, but Python allows it.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# totally valid, not very good python&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;take_anything&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# a list&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# a string&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# a tuple&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Go won&amp;rsquo;t compile anything like that, at least not without writing code that makes it very clear we&amp;rsquo;re dealing with a container of unknown length, holding an unknown type. And if we want to use that type, we&amp;rsquo;re going to have to deal with those unknowns.&lt;/p&gt;
&lt;p&gt;Over time, I&amp;rsquo;ve come to appreciate that checking types at build time removes a whole class of bugs I&amp;rsquo;d otherwise find much later, when a user somehow passed in something I hadn&amp;rsquo;t anticipated. Now I add type hints to Python and JavaScript out of habit.&lt;/p&gt;
&lt;h2&gt;Keep your tools together&lt;/h2&gt;
&lt;p&gt;One of Go&amp;rsquo;s selling points is that it compiles quickly. We had a large, multipackage codebase with lots of dependencies, and yet it compiled in a second or two. Go&amp;rsquo;s compiler is fast enough that it&amp;rsquo;s normal to use &lt;code&gt;go run main.go&lt;/code&gt; in development &amp;ndash; letting Go build a binary and then run it &amp;ndash; rather than compiling first and running separately.&lt;/p&gt;
&lt;p&gt;Alongside the compiler, Go includes a code formatter (&lt;code&gt;go fmt&lt;/code&gt;), test suite (&lt;code&gt;go test&lt;/code&gt;) and package manager (&lt;code&gt;go mod&lt;/code&gt;) in its default toolset. I wrote a very long post about how I install Python. My version of that for Go is one line:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I&amp;rsquo;ve come to love tools like Black and Prettier because it removes the mental overhead of formatting &amp;ndash; and deciding &lt;em&gt;how&lt;/em&gt; to format &amp;ndash; my code. I write fast and the formatting cleans it up. But Black and Prettier are third-party tools that need to be installed, and a team has to agree to use them. Go has &lt;code&gt;go fmt&lt;/code&gt; by default.&lt;/p&gt;
&lt;h2&gt;Easier, if not easy, async&lt;/h2&gt;
&lt;p&gt;Python was (arguably) late to async. Node.js had it from the beginning, but promises significantly improved the experience. Go has channels and &lt;a href="https://go.dev/tour/concurrency/1"&gt;goroutines&lt;/a&gt; built into the language in a way I immediately liked. I didn&amp;rsquo;t use it often, but when I needed to parallelize a process, it was easier to reason about than a lot of other tools I&amp;rsquo;ve used. &lt;a href="https://go.dev/doc/effective_go#concurrency"&gt;Sharing by communicating&lt;/a&gt; is a pattern I understand.&lt;/p&gt;
&lt;h2&gt;Go is better now than five years ago&lt;/h2&gt;
&lt;p&gt;Using &lt;code&gt;go mod&lt;/code&gt; is great, but it&amp;rsquo;s also relatively new. When I started writing Go, we used &lt;code&gt;dep&lt;/code&gt; and other tools to manage dependencies. Every package lived on a system-level &lt;code&gt;$GOPATH&lt;/code&gt;, alongside our code. Modules and tools to manage different versions of dependencies didn&amp;rsquo;t arrive until Go 1.11.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://go.dev/doc/tutorial/generics"&gt;Generics&lt;/a&gt; are another big addition to Go, and it&amp;rsquo;s a new enough part of the language that I&amp;rsquo;ve never actually used it. I probably could&amp;rsquo;ve refactored a lot of my codebase to use generics, but I never made the time. When I was first learning Go, I kept looking for something like Python&amp;rsquo;s &lt;code&gt;itertools&lt;/code&gt; in the standard library. I &lt;em&gt;think&lt;/em&gt; generics will fill that hole.&lt;/p&gt;
&lt;p&gt;Another small feature I love: &lt;a href="https://pkg.go.dev/embed@go1.20.1"&gt;&lt;code&gt;embed&lt;/code&gt;&lt;/a&gt;. Let&amp;rsquo;s say I need a large SQL query that I&amp;rsquo;d rather write in its own file. I often write code like this in Python:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt;

&lt;span class="n"&gt;SQL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;query.sql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or in Node.js:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fs&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;node:fs&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;node:path&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;SQL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./query.sql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In both cases, I&amp;rsquo;m reading a file, synchronously, at runtime. Yes, it&amp;rsquo;s only doing that once, but it&amp;rsquo;s still a thing the code has to do at runtime. Go can use the &lt;code&gt;embed&lt;/code&gt; package to do it at build time.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;embed&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;//go:embed query.sql&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;It&amp;rsquo;s a weird syntax&lt;/h2&gt;
&lt;p&gt;Even after five years with Go, I still find myself looking up basic things, like how to read files or use parts of the standard library. There are great resources, like &lt;a href="https://gobyexample.com/"&gt;Go by Example&lt;/a&gt;, but it&amp;rsquo;s still not an intuitive language.&lt;/p&gt;
&lt;p&gt;Little things like capitalizing variables to export, or using curly braces where other languages use parentheses, or returning errors still force me to stop and remember how the language works. It&amp;rsquo;s just different enough from every other language I work in that I have to think about it every time.&lt;/p&gt;
&lt;p&gt;All that said, I like it and expect to keep using, even if it&amp;rsquo;s not part of my regular job.&lt;/p&gt;</description><guid isPermaLink="false">/blog/2023-03-05/five-years-of-go/</guid><pubDate>Sun, 05 Mar 2023 00:00:00 -0500</pubDate></item><item><title>MuckRock</title><link>https://chrisamico.com/blog/2023-03-04/muckrock/</link><description>&lt;p&gt;I am heading to &lt;a href="https://www.muckrock.com/"&gt;MuckRock&lt;/a&gt; to work on &lt;a href="https://www.documentcloud.org/home/"&gt;DocumentCloud&lt;/a&gt;. My last day at Gannett was yesterday; I start the new job on Monday.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been a fan and a user of DocumentCloud since it launched: I got PBS NewsHour into the beta test. I wrote a WordPress plugin (in PHP) to make embedding it easier at NPR &amp;ndash; now MuckRock maintains that plugin. I build the &lt;a href="http://www.homicidewatch.org"&gt;Homicide Watch&lt;/a&gt; court document library (in javascript) on DocumentCloud before DocumentCloud had a way to embed more than one document at a time. I wrote an &lt;a href="https://www.usatoday.com/documents/23594627-letter-to-sec-on-congressman-santos/"&gt;integration&lt;/a&gt; for USA TODAY and other Gannett sites (in Go).&lt;/p&gt;
&lt;p&gt;DocumentCloud has become critical infrastructure for journalism. The developers who&amp;rsquo;ve worked on it are people whose code I&amp;rsquo;ve long admired and learned from. Now I&amp;rsquo;ll have a hand in maintaining it. Needless to say, I&amp;rsquo;m excited.&lt;/p&gt;
&lt;p&gt;At the same time, I&amp;rsquo;m going to miss my friends and colleagues across Gannett. At five years, it&amp;rsquo;s the longest I&amp;rsquo;ve ever stayed in one job. I started when the company was first calling itself USA TODAY Network, and figuring out what it meant to be a real network. My favorite projects were those that took advantage of the network, &lt;a href="https://www.azcentral.com/in-depth/news/2021/11/20/us-forest-service-water-management-limited-oversight-diversions/8446212002/"&gt;like this one&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My team, the Storytelling Studio, worked in a space between the newsroom and product &amp;ndash; faster and more experimental than our colleagues managing the CMS and other infrastructure, more focused on tools and reusability than our friends on the graphics desk. I liked to say that we didn&amp;rsquo;t fight fires, we built fire engines. It&amp;rsquo;s a fun and challenging space to work in, and I had the luck of finding one of the best teams I&amp;rsquo;ve ever worked on.&lt;/p&gt;
&lt;p&gt;Much of what I said in my &lt;a href="https://chrisamico.com/blog/2023-02-01/three-kinds-of-code/"&gt;Three Kinds of Code&lt;/a&gt; talk at NICAR 2020 comes from what I learned in the first two years with the Storytelling Studio, and using those lessons to reflect on my previous jobs.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll say more about what I learned at Gannett in future posts, but for now, all I want to say is that I&amp;rsquo;m grateful for everything I got to do there, and especially for everyone I got to work with.&lt;/p&gt;
&lt;p&gt;Onward to MuckRock.&lt;/p&gt;</description><guid isPermaLink="false">/blog/2023-03-04/muckrock/</guid><pubDate>Sat, 04 Mar 2023 00:00:00 -0500</pubDate></item><item><title>Automatically posting shared links to Mastodon with Toot</title><link>https://chrisamico.com/blog/2023-02-12/mastodon/</link><description>&lt;p&gt;I jumped from Twitter to &lt;a href="https://journa.host/@chrisamico"&gt;Mastodon&lt;/a&gt; in November, shortly after Elon Musk took over and fired half the company&amp;rsquo;s workforce. I&amp;rsquo;ve spent less and less time on Twitter in the last few years, but it was still a good place to watch for interesting discussions and links, and to share my own work. I took the app off my phone and, for the most part, I don&amp;rsquo;t miss it.&lt;/p&gt;
&lt;p&gt;Years ago, I set up a feed that piped stories I liked on Instapaper to my Twitter account. I honestly can&amp;rsquo;t remember how I did that, and I&amp;rsquo;m not sure how to turn it off. Twitter&amp;rsquo;s &lt;a href="https://techcrunch.com/2023/02/08/twitter-says-the-basic-tier-of-its-api-will-cost-100-per-month/"&gt;new API pricing&lt;/a&gt; will probably take care of that for me.&lt;/p&gt;
&lt;p&gt;I finally got something similar &amp;ndash; better, even &amp;ndash; set up on Mastodon last night. It&amp;rsquo;s part of this codebase, which means I can tweak it or turn it off or turn it up whenever I want. I&amp;rsquo;m using &lt;a href="https://github.com/ihabunek/toot/"&gt;toot&lt;/a&gt;, a Python client for Mastodon, on &lt;a href="https://til.simonwillison.net/mastodon/mastodon-bots-github-actions"&gt;Simon Willison&amp;rsquo;s recommendation&lt;/a&gt;. It&amp;rsquo;s a great library, though it seems mostly intended as a &lt;abbr title="command-line interface"&gt;CLI&lt;/abbr&gt; tool.&lt;/p&gt;
&lt;p&gt;I decided to use it directly from Python, because I wanted to record which links I&amp;rsquo;ve already posted. That part of &lt;code&gt;toot&lt;/code&gt; isn&amp;rsquo;t documented, but the code is easy enough to read. We&amp;rsquo;ll see if this comes back to bite me. The whole script is &lt;a href="https://github.com/eyeseast/chrisamico.com/blob/main/links/mastodon.py"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The relevant part of the code, which posts to Mastodon and updates a SQLite table, is this function:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;post the update and record that I did it&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;updates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_updated_table&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;USER&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;@&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;link_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;posted&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UpdateStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;post_url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UpdateStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;

    &lt;span class="n"&gt;updates&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;rsquo;s ultimately a lot more code than Simon is &lt;a href="https://github.com/simonw/covidsewage-bot/blob/main/.github/workflows/toot.yml"&gt;using&lt;/a&gt; to update his &lt;a href="https://fedi.simonwillison.net/@covidsewage"&gt;COVID sewage bot&lt;/a&gt;, but I think I have a better understanding of what&amp;rsquo;s possible with the &lt;a href="https://docs.joinmastodon.org/api/"&gt;Mastodon API&lt;/a&gt; now. It definitely feels like something from the early days of Twitter, when people were inventing new ways to use a new platform, and it was fun.&lt;/p&gt;
&lt;p&gt;I might build a bot or two.&lt;/p&gt;</description><guid isPermaLink="false">/blog/2023-02-12/mastodon/</guid><pubDate>Sun, 12 Feb 2023 00:00:00 -0500</pubDate></item><item><title>The Three Kinds of Code You Write in the Newsroom</title><link>https://chrisamico.com/blog/2023-02-01/three-kinds-of-code/</link><description>&lt;p&gt;&lt;em&gt;This is a &lt;a href="https://rjionline.org/news/the-three-kinds-of-code-you-write-in-the-newsroom/"&gt;lightning talk&lt;/a&gt; I gave at NICAR 2020. Since then, this framework has become the primary way I explain what programmers (like myself) do in newsrooms. You can watch a video of the talk &lt;a href="https://youtu.be/TwJhJ44mTuE"&gt;here&lt;/a&gt; or click through slides &lt;a href="https://eyeseast.github.io/nicar-2020-three-kinds-of-code/"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A couple years ago, I had one of those opportunities you don&amp;rsquo;t get often: I got to build a team from scratch.&lt;/p&gt;
&lt;p&gt;Not a big team, there would be three of us, and we&amp;rsquo;d have a role in basically everything that required code on a small news site &amp;ndash; from &lt;a href="https://www.pbs.org/wgbh/frontline/interactive/child-marriage-by-the-numbers/"&gt;data journalism&lt;/a&gt;, to &lt;a href="https://www.pbs.org/wgbh/frontline/interactive/inheritance/"&gt;experimenting with new story forms&lt;/a&gt;, to a &lt;a href="https://www.pbs.org/wgbh/frontline/article/welcome-to-our-new-site/"&gt;major site redesign&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;
    &lt;div class="team"&gt;
        &lt;span class="box"&gt;
        ??
        &lt;/span&gt;
        &lt;span class="box"&gt;
        me
        &lt;/span&gt;
        &lt;span class="box"&gt;
        ??
        &lt;/span&gt;
    &lt;/div&gt;
&lt;/figure&gt;

&lt;p&gt;As we got into the hiring process, I started making a list of all the skills we might need, so I could compare candidates.&lt;/p&gt;
&lt;figure&gt;
    &lt;ul class="skills"&gt;
        &lt;li&gt;html&lt;/li&gt;
        &lt;li&gt;css&lt;/li&gt;
        &lt;li&gt;javascript&lt;/li&gt;
        &lt;li&gt;php&lt;/li&gt;
        &lt;li&gt;sql&lt;/li&gt;
        &lt;li&gt;python&lt;/li&gt;
        &lt;li&gt;git&lt;/li&gt;
        &lt;li&gt;node&lt;/li&gt;
        &lt;li&gt;d3&lt;/li&gt;
        &lt;li&gt;photoshop&lt;/li&gt;
        &lt;li&gt;illustrator&lt;/li&gt;
        &lt;li&gt;wordpress&lt;/li&gt;
        &lt;li&gt;excel&lt;/li&gt;
        &lt;li&gt;R&lt;/li&gt;
        &lt;li&gt;foia&lt;/li&gt;
        &lt;li&gt;statistics&lt;/li&gt;
        &lt;li&gt;scraping&lt;/li&gt;
        &lt;li&gt;bash&lt;/li&gt;
        &lt;li&gt;video editing&lt;/li&gt;
        &lt;li&gt;after effects&lt;/li&gt;
        &lt;li&gt;dev ops&lt;/li&gt;
        &lt;li&gt;mapping&lt;/li&gt;
        &lt;li&gt;...&lt;/li&gt;
    &lt;/ul&gt;
&lt;/figure&gt;

&lt;p&gt;This got overwhelming pretty quickly.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t realize it at the time, but this was part of a problem I&amp;rsquo;d been struggling with in different ways since I started writing code for journalism, back when George W Bush was still president.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a problem of language.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src="https://upload.wikimedia.org/wikipedia/commons/0/09/Turris_Babel_by_Athanasius_Kircher.jpg" alt="Turris Babel by Athanasius Kircher.jpg" height="467" width="480"&gt;&lt;/a&gt;
    &lt;figcaption&gt;By &lt;a href="https://en.wikipedia.org/wiki/en:Coenraet_Decker" class="extiw" title="w:en:Coenraet Decker"&gt;&lt;span title="Dutch Golden Age engraver"&gt;Coenraet Decker&lt;/span&gt;&lt;/a&gt; - &lt;a rel="nofollow" class="external free" href="http://digi.ub.uni-heidelberg.de/diglit/kircher1679/0059"&gt;http://digi.ub.uni-heidelberg.de/diglit/kircher1679/0059&lt;/a&gt;, Public Domain, &lt;a href="https://commons.wikimedia.org/w/index.php?curid=35102210"&gt;Link&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;There&amp;rsquo;s an overwhelming number of skills and tools we use in writing code around news.&lt;/p&gt;
&lt;p&gt;Most of those, and most job descriptions, are lumped together into titles like &amp;ldquo;news applications&amp;rdquo; or &amp;ldquo;interactives&amp;rdquo; or data journalism.&lt;/p&gt;
&lt;p&gt;Then a few months ago, a friend asked me to talk to one of her students who was a talented photographer and also starting a comp sci program. And he wanted to know what to do with that set of skills.&lt;/p&gt;
&lt;p&gt;And after talking to him and thinking about the jobs I&amp;rsquo;ve had, I realized that ultimately, there are three kinds of code we write in newsrooms:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reporting&lt;/strong&gt;. &lt;strong&gt;Storytelling&lt;/strong&gt;. &lt;strong&gt;Product&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s pretty much it.&lt;/p&gt;
&lt;p&gt;So what do I mean by reporting, storytelling and product?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reporting&lt;/strong&gt; code is, well, reporting. It&amp;rsquo;s how we gather information and ask questions of it. It&amp;rsquo;s scraping, data analysis, machine learning and natural language processing. When you&amp;rsquo;re using SQL, R, Pandas and Jupyter notebooks, you&amp;rsquo;re probably writing code I&amp;rsquo;d call reporting. If you&amp;rsquo;re writing code to figure out if you have a story, I&amp;rsquo;d say you&amp;rsquo;re doing reporting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Storytelling&lt;/strong&gt; is, of course, what we do with all that reporting. It&amp;rsquo;s our graphics, interactive or not, and maps and charts and generative text. It&amp;rsquo;s AR and VR and 3D modeling. We know what we&amp;rsquo;re trying to say, because we did the reporting, and now we&amp;rsquo;re speaking with code.&lt;/p&gt;
&lt;p&gt;And what is product? You might be thinking: We have another department that does that. They build the CMS and handle ad code, and I&amp;rsquo;m in the newsroom.&lt;/p&gt;
&lt;p&gt;And I&amp;rsquo;m here to say, &lt;em&gt;more of us are doing product than we realize&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Product&lt;/strong&gt; is everything we build that isn&amp;rsquo;t for just one story or project.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s everything we do between deadlines that makes our next project launch faster or run smoother or get a little closer to what our audience needs. (In fact, it&amp;rsquo;s everywhere we talk about user needs.)&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s anything we need to maintain, and anything that accumulated technical debt. (You might say it is the technical debt.)&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s our app templates and starter kits that we update after we launch a project. It&amp;rsquo;s our longform tool. It&amp;rsquo;s our open source code. It&amp;rsquo;s our analytics packages and documented best practices.&lt;/p&gt;
&lt;h2&gt;An example: Ahead of the Fire&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.azcentral.com/in-depth/news/local/arizona-wildfires/2019/07/22/wildfire-risks-more-than-500-spots-have-greater-hazard-than-paradise/1434502001/"&gt;Here&amp;rsquo;s an example&lt;/a&gt;. This series &amp;ndash; &lt;a href="https://www.azcentral.com/in-depth/news/local/arizona-wildfires/2019/07/22/wildfire-risks-more-than-500-spots-have-greater-hazard-than-paradise/1434502001/"&gt;Ahead of the Fire&lt;/a&gt; &amp;ndash; looked a wildfire risk across the Western United States.&lt;/p&gt;
&lt;p&gt;In the reporting phase, my colleagues used GIS tools to ask which communities are most at risk, and which particular risks does each community face.&lt;/p&gt;
&lt;p&gt;The storytelling side focused on explaining those risks and the methodology behind the story.&lt;/p&gt;
&lt;p&gt;And here&amp;rsquo;s product: We call this the In-Depth framework, and it&amp;rsquo;s the machinary that powers our best storytelling.&lt;/p&gt;
&lt;p&gt;So why does it matter what we call these kinds of code? Because they move at different speeds. And every newsroom I&amp;rsquo;ve worked in has struggled at moving at different speeds.&lt;/p&gt;
&lt;p&gt;&lt;img alt="chart of reporting, storytelling and product cadence" src="https://media.githubusercontent.com/media/eyeseast/nicar-2020-three-kinds-of-code/main/assets/code-speeds.png" /&gt;&lt;/p&gt;
&lt;p&gt;Think of a project you worked on that went well. It probably started with a lot of reporting, which tapered off as the story solidified and you started to focus on storytelling. Meanwhile, product is (or should be) moving along in a steady cadence of sprints.&lt;/p&gt;
&lt;p&gt;And this is where it&amp;rsquo;s important to know what kind of code we&amp;rsquo;re writing, and to be able to talk about it with other people in the newsroom, especially our editors. This is where it&amp;rsquo;s easy to screw things up.&lt;/p&gt;
&lt;p&gt;This is where I&amp;rsquo;ve screwed things up.&lt;/p&gt;
&lt;p&gt;Like trying to make something reusable too early: I wrote &lt;a href="https://github.com/eyeseast/propublica-congress"&gt;a Python client for the ProPublica Congress API&lt;/a&gt; because someone pitched a story related to Congress, and my response was to create a library. Cool. Never used it for a story.&lt;/p&gt;
&lt;p&gt;Or falling in love with storytelling when it&amp;rsquo;s time to move into product: &lt;a href="http://apps.frontline.org/zika-water/"&gt;This story on Zika&lt;/a&gt; was great. We did a dozen like it, with a little variation, each one basically a bespoke Tarbell project.&lt;/p&gt;
&lt;p&gt;After about the third one, we really should have started building tools into WordPress, but I was nervous about technical debt. This is where it helps to think in product terms.&lt;/p&gt;
&lt;p&gt;Writing storytelling code that becomes technical debt: The original topper &lt;a href="https://www.desertsun.com/in-depth/news/environment/border-pollution/poisoned-cities/2018/12/05/air-pollution-taking-deadly-toll-u-s-mexico-border/1381585002/"&gt;in this story&lt;/a&gt; was gorgeous. It was also built into our storytelling framework, which meant we were responsible for maintaining it. Forever. Oops. (We finally made it a static image.)&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m sure you have your own examples.&lt;/p&gt;
&lt;p&gt;Thinking about these three distinct kinds of code can help beyond individual projects.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re looking at a job description, it&amp;rsquo;s a good way to get a read on what kind of job it is, and whether it matches up with your skills or career goals. You might use it to decide which NICAR sessions to go to.&lt;/p&gt;
&lt;p&gt;It helps answer the question: &amp;ldquo;Should I learn [fill in the blank]?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Now you can reframe it as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;What is X best suited for?&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;How might X be used for reporting, for storytelling, for product?&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One last thing:&lt;/p&gt;
&lt;p&gt;When I talk about three kinds of code, I want to be very clear that I don&amp;rsquo;t mean there are three kinds of coders.&lt;/p&gt;
&lt;p&gt;As I said at the top, most of us are doing all three kinds of programming, and I think that&amp;rsquo;s a good thing, because it pushes us to be better and more well-rounded, both as programmers and as journalists.&lt;/p&gt;
&lt;p&gt;Reporting and storytelling are still the core of our profession, and product is going to open up new ways of doing both.&lt;/p&gt;
&lt;p&gt;We all have a lot to learn from each other.&lt;/p&gt;</description><guid isPermaLink="false">/blog/2023-02-01/three-kinds-of-code/</guid><pubDate>Wed, 01 Feb 2023 00:00:00 -0500</pubDate></item><item><title>My Python setup, as of January 2023</title><link>https://chrisamico.com/blog/2023-01-14/python-setup/</link><description>&lt;p&gt;This is my recommended Python setup, as of January 2023. The Python landscape can be a &lt;a href="https://xkcd.com/1987/"&gt;confusing mess of overlapping tools&lt;/a&gt; that sometimes don&amp;rsquo;t work well together. I wrote this for my team at work, which included (at the time) a designer and several developers used to working in Node.js and Go. This was an effort to standardize our environments.&lt;/p&gt;
&lt;h2&gt;Tools and helpful links:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python docs: &lt;a href="https://docs.python.org/3/"&gt;https://docs.python.org/3/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python Standard Library: &lt;a href="https://docs.python.org/3/library/index.html"&gt;https://docs.python.org/3/library/index.html&lt;/a&gt; - Start here when you&amp;rsquo;re trying to solve a specific problem&lt;/li&gt;
&lt;li&gt;pip: &lt;a href="https://pip.pypa.io/en/stable/"&gt;https://pip.pypa.io/en/stable/&lt;/a&gt; - Python&amp;rsquo;s standard package installer, included with the language itself&lt;/li&gt;
&lt;li&gt;pipx: &lt;a href="https://pipxproject.github.io/pipx/"&gt;https://pipxproject.github.io/pipx/&lt;/a&gt; - Global script installer, built on top of pip&lt;/li&gt;
&lt;li&gt;pipenv: &lt;a href="https://pipenv.pypa.io/en/latest/"&gt;https://pipenv.pypa.io/en/latest/&lt;/a&gt; - Package installer for projects, manages both dependencies and virtual environments&lt;/li&gt;
&lt;li&gt;pyenv: &lt;a href="https://github.com/pyenv/pyenv"&gt;https://github.com/pyenv/pyenv&lt;/a&gt; - Manage different versions of Python itself&lt;/li&gt;
&lt;li&gt;homebrew: &lt;a href="https://brew.sh/"&gt;https://brew.sh/&lt;/a&gt; - Package manager for macOs, use for specific needs&lt;/li&gt;
&lt;li&gt;Postgres.app: &lt;a href="https://postgresapp.com/"&gt;https://postgresapp.com/&lt;/a&gt; - Preferred database server for macOs&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Installing the right Python&lt;/h2&gt;
&lt;p&gt;Python 3 is now the right version of Python to use. We may have projects running different minor versions – such as 3.7 or 3.9 – but we should always default to the latest available version. As of this writing, that&amp;rsquo;s 3.11.1. The most up-to-date Python documentation will always be here: https://docs.python.org/3/.&lt;/p&gt;
&lt;p&gt;In the past, you might have seen recommendations to install Python with homebrew. This is now strongly discouraged. Let me say that louder: &lt;strong&gt;DO NOT INSTALL PYTHON WITH HOMEBREW&lt;/strong&gt;. Homebrew can be very aggressive and expansive with upgrades, and upgrading one package often results in lots of seemingly unrelated upgrades, which will frequently break dependencies for other packages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use pyenv&lt;/strong&gt;. To install and manage different Python versions, use pyenv. In most cases, I recommend either the homebrew installation or the git installation:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew&lt;span class="w"&gt; &lt;/span&gt;update
brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pyenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Is it weird that I recommend using homebrew to install pyenv but not Python? Yes it is. But pyenv is built entirely with shell scripts, so it&amp;rsquo;s relatively safe, and pyenv itself will keep your Python versions safely isolated from homebrew&amp;rsquo;s aggressive upgrades.&lt;/p&gt;
&lt;p&gt;Follow the instructions to configure your shell profile (https://github.com/pyenv/pyenv#installation) so that the pyenv command is available and you are able to install new versions of Python as needed.&lt;/p&gt;
&lt;p&gt;From there, install at least the latest stable version of Python (again, probably 3.11.1) and make that your global default. This will make the right version of pip available for installing new packages.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--list&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# see a list of installable versions&lt;/span&gt;
pyenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.11.1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# or something different&lt;/span&gt;
pyenv&lt;span class="w"&gt; &lt;/span&gt;global&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.11.1

python&lt;span class="w"&gt; &lt;/span&gt;--version
&lt;span class="c1"&gt;# Python 3.11.1&lt;/span&gt;

which&lt;span class="w"&gt; &lt;/span&gt;python
&lt;span class="c1"&gt;# /Users/camico/.pyenv/shims/python&lt;/span&gt;

which&lt;span class="w"&gt; &lt;/span&gt;pip
&lt;span class="c1"&gt;# /Users/camico/.pyenv/shims/pip&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Global scripts and utilities&lt;/h2&gt;
&lt;p&gt;For any tools built in Python you want available across projects, use &lt;code&gt;pipx&lt;/code&gt;. Install it with &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--user&lt;span class="w"&gt; &lt;/span&gt;pipx&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# install it&lt;/span&gt;
pipx&lt;span class="w"&gt; &lt;/span&gt;ensurepath&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# make sure your system can find it&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;(Note that pipx&amp;rsquo;s documentation recommends installing with Homebrew. As noted above, I don&amp;rsquo;t recommend using Homebrew with Python projects, except for pyenv.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Among the first things you should install with &lt;code&gt;pipx&lt;/code&gt; is &lt;code&gt;pipenv&lt;/code&gt;, which we&amp;rsquo;ll use for specific projects.&lt;/p&gt;
&lt;h2&gt;Virtual environments&lt;/h2&gt;
&lt;p&gt;Python uses virtual environments to separate dependencies for different projects. This can be a frustrating step, especially if you are used to having a local &lt;code&gt;node_modules&lt;/code&gt; folder. In the past, this also meant having to install a separate &lt;code&gt;virtualenv&lt;/code&gt; library. In Python 3, it&amp;rsquo;s now part of the standard library as the &lt;code&gt;venv&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;This is a good tutorial that covers how virtual environments work: https://docs.python.org/3/tutorial/venv.html&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the tl;dr:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;project-dir

&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;project-dir/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That will create a virtual environment in the &lt;code&gt;project-dir&lt;/code&gt; folder. The second command will run the activate script, which will tell your shell to use a local version of Python and locally installed dependencies. For the most part, you won&amp;rsquo;t have to do this by hand, but it&amp;rsquo;s useful to know what&amp;rsquo;s happening under the hood.&lt;/p&gt;
&lt;p&gt;In a project with a &lt;code&gt;Pipfile&lt;/code&gt;, like &lt;a href="https://github.com/eyeseast/alltheplaces-datasette"&gt;alltheplaces-datasette&lt;/a&gt;, we can use &lt;code&gt;pipenv&lt;/code&gt; to both manage our virtual environment and install dependencies. In that case, navigate to the directory and run &lt;code&gt;pipenv sync&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;alltheplaces-datasette
pipenv&lt;span class="w"&gt; &lt;/span&gt;sync
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will also, assuming you have pyenv installed and working, switch to the version of Python listed in the &lt;code&gt;Pipfile&lt;/code&gt; (installing it if needed). Consult the &lt;a href="https://pipenv.pypa.io/en/latest/"&gt;pipenv docs&lt;/a&gt; to see what else it can do.&lt;/p&gt;
&lt;p&gt;In practice, I almost never use a virtual environment by itself. My standalone projects, like &lt;a href="https://github.com/eyeseast/alltheplaces-datasette"&gt;alltheplaces-datasette&lt;/a&gt;, will always include a &lt;code&gt;Pipfile&lt;/code&gt; and &lt;code&gt;Pipfile.lock&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When I work on open source libraries (mine or not), I still use &lt;code&gt;pipenv&lt;/code&gt;. Running &lt;code&gt;pipenv install -e .&lt;/code&gt; will create a virtual environment with that library and its dependencies.&lt;/p&gt;
&lt;p&gt;If I need to run Python commands inside a virtual environment, I use &lt;code&gt;pipenv shell&lt;/code&gt; or &lt;code&gt;pipenv run&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Installing local Python packages&lt;/h2&gt;
&lt;p&gt;For the most part, we&amp;rsquo;re going to work on projects where we have a &lt;code&gt;Pipfile&lt;/code&gt; managing dependencies. In that case, installing something new is a one-liner:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pipenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;django
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That will install the &lt;code&gt;django&lt;/code&gt; package, add it to our &lt;code&gt;Pipfile&lt;/code&gt; and update our &lt;code&gt;Pipfile.lock&lt;/code&gt; file, pinning a specific version. Running &lt;code&gt;pipenv sync&lt;/code&gt;, as above, installs dependencies from &lt;code&gt;Pipfile.lock&lt;/code&gt;, much like &lt;code&gt;npm ci&lt;/code&gt; installs from &lt;code&gt;package-lock.json&lt;/code&gt;, ensuring we get the same version of every dependency every time.&lt;/p&gt;
&lt;h2&gt;Databases&lt;/h2&gt;
&lt;p&gt;There are two main databases I use with Python: &lt;a href="https://sqlite.org/"&gt;SQLite&lt;/a&gt; and &lt;a href="https://www.postgresql.org/"&gt;Postgres&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;SQLite comes bundled with Python, though I use a more recent version installed via Homebrew. (That&amp;rsquo;s worth a post in itself.) It runs as an embedded process, with all data contained in a single file, and it can be very useful for data analysis.&lt;/p&gt;
&lt;p&gt;Postgres is the best database available for web applications. For local development, I recommend &lt;code&gt;Postgres.app&lt;/code&gt;, which the easiest way to manage a database server on your laptop.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;So that&amp;rsquo;s it. It&amp;rsquo;s a lot. Why is Python so complicated to set up right? I&amp;rsquo;ll get into that in a future post.&lt;/em&gt;&lt;/p&gt;</description><guid isPermaLink="false">/blog/2023-01-14/python-setup/</guid><pubDate>Sat, 14 Jan 2023 00:00:00 -0500</pubDate></item><item><title>Hello, World</title><link>https://chrisamico.com/blog/2023-01-07/hello/</link><description>&lt;p&gt;There are many places to write on the internet. This one is mine.&lt;/p&gt;</description><guid isPermaLink="false">/blog/2023-01-07/hello/</guid><pubDate>Sat, 07 Jan 2023 00:00:00 -0500</pubDate></item></channel></rss>